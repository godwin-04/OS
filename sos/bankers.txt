#include <stdio.h>
#define MAX_PROCESSES 10
#define MAX_RESOURCES 10
// Function to calculate the need matrix
void calculateNeedMatrix(int need[MAX_PROCESSES][MAX_RESOURCES], int
max[MAX_PROCESSES][MAX_RESOURCES], int
allocation[MAX_PROCESSES][MAX_RESOURCES], int n, int m) {
int i,j;
for ( i = 0; i < n; i++) {
for ( j = 0; j < m; j++) {
need[i][j] = max[i][j] - allocation[i][j];
}
}
}
// Function to check if a process can be allocated resources
int isSafe(int available[MAX_RESOURCES], int
need[MAX_PROCESSES][MAX_RESOURCES],
int allocation[MAX_PROCESSES][MAX_RESOURCES], int n, int m) {
int work[MAX_RESOURCES];
int finish[MAX_PROCESSES] = {0};
int i,k;
// Initialize work array with available resources
for ( i = 0; i < m; i++) {
work[i] = available[i];
}
// Find a process that can be executed
for ( k = 0; k < n; k++) {
for ( i = 0; i < n; i++) {
if (finish[i] == 0) {
int j,r;
for (j = 0; j < m; j++) {
if (need[i][j] > work[j]) {
break;
}
}
// If all resources for process i can be allocated
if (j == m) {
// Allocate resources to process i
for ( r = 0; r < m; r++) {
work[r] += allocation[i][r];
}
// Mark process i as finished
finish[i] = 1;
}
}
}
}
// Check if all processes have finished execution
for ( i = 0; i < n; i++) {
if (finish[i] == 0) {
return 0; // System is in an unsafe state
}
}
return 1; // System is in a safe state
}
// Function to display the matrices
void displayMatrices(int available[MAX_RESOURCES], int
need[MAX_PROCESSES][MAX_RESOURCES], int
allocation[MAX_PROCESSES][MAX_RESOURCES], int n, int m) {
int i,j;
printf("AVAILABLE:\n");
for ( i = 0; i < m; i++) {
printf("%d ", available[i]);
}
printf("\n\nNEED:\n");
for ( i = 0; i < n; i++) {
for ( j = 0; j < m; j++) {
printf("%d ", need[i][j]);
}
printf("\n");
}
printf("\nPROCESS SEQUENCE:\n");
int work[MAX_RESOURCES];
int finish[MAX_PROCESSES] = {0};
// Initialize work array with available resources
for ( i = 0; i < m; i++) {
work[i] = available[i];
}
// Find a process that can be executed
int sequence[MAX_PROCESSES];
int seqIndex = 0;
while (seqIndex < n) {
int found = 0;
for ( i = 0; i < n; i++) {
if (finish[i] == 0) {
int r;
for (j = 0; j < m; j++) {
if (need[i][j] > work[j]) {
break;
}
}
// If all resources for process i can be allocated
if (j == m) {
// Allocate resources to process i
for ( r = 0; r < m; r++) {
work[r] += allocation[i][r];
}
// Mark process i as finished
finish[i] = 1;
sequence[seqIndex++] = i;
found = 1;
}
}
}
// If no process found that can be executed, break the loop
if (found == 0) {
break;
}
}
// Display process sequence
for ( i = 0; i < seqIndex; i++) {
printf("%d ", sequence[i]);
}
printf("\n");
}
int main() {
int i,j,n, m; // Number of processes and resources
int available[MAX_RESOURCES];
int max[MAX_PROCESSES][MAX_RESOURCES];
int allocation[MAX_PROCESSES][MAX_RESOURCES];
printf("Enter the number of processes: ");
scanf("%d", &n);
printf("Enter the number of resources: ");
scanf("%d", &m);
printf("Enter the number of available resources for each type:\n");
for ( i = 0; i < m; i++) {
scanf("%d", &available[i]);
}
printf("Enter the allocation matrix:\n");
for ( i = 0; i < n; i++) {
for ( j = 0; j < m; j++) {
scanf("%d", &allocation[i][j]);
}
}
printf("Enter the maximum matrix:\n");
for ( i = 0; i < n; i++) {
for ( j = 0; j < m; j++) {
scanf("%d", &max[i][j]);
}
}
int need[MAX_PROCESSES][MAX_RESOURCES];
// Calculate the need matrix
calculateNeedMatrix(need, max, allocation, n, m);
// Check if the system is in a safe state
if (isSafe(available, need, allocation, n, m)) {
printf("\nThe system is in a safe state.\n\n");
displayMatrices(available, need, allocation, n, m);
} else {
printf("\nThe system is in an unsafe state. Deadlock may occur.\n");
}
return 0;
}