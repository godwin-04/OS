#include <stdio.h>

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
};

void swap(struct Process *a, struct Process *b) {
    struct Process temp = *a;
    *a = *b;
    *b = temp;
}

void sortProcessesByArrivalTime(struct Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival_time > processes[j + 1].arrival_time) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

void SJF(struct Process processes[], int n) {
    sortProcessesByArrivalTime(processes, n);
    
    int currentTime = 0;
    printf("Gantt Chart:\n");
    while (1) {
        int shortestJobIndex = -1;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= currentTime && processes[i].burst_time > 0) {
                if (shortestJobIndex == -1 || processes[i].burst_time < processes[shortestJobIndex].burst_time) {
                    shortestJobIndex = i;
                }
            }
        }
        
        if (shortestJobIndex == -1) {
            printf(" %d ", currentTime);
            currentTime++;
            continue;
        }
        
        printf(" %d | P%d ", currentTime, processes[shortestJobIndex].id);
        processes[shortestJobIndex].burst_time--;
        currentTime++;
        
        if (processes[shortestJobIndex].burst_time == 0) {
            processes[shortestJobIndex].completion_time = currentTime;
            processes[shortestJobIndex].turnaround_time = processes[shortestJobIndex].completion_time - processes[shortestJobIndex].arrival_time;
            processes[shortestJobIndex].waiting_time = processes[shortestJobIndex].turnaround_time - processes[shortestJobIndex].burst_time;
        }
        
        int allCompleted = 1;
        for (int i = 0; i < n; i++) {
            if (processes[i].burst_time > 0) {
                allCompleted = 0;
                break;
            }
        }
        
        if (allCompleted) {
            break;
        }
    }
    printf(" %d \n", currentTime);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    
    struct Process processes[n];
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
    }
    
    SJF(processes, n);
    
    printf("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrival_time,
               processes[i].burst_time, processes[i].completion_time, processes[i].turnaround_time,
               processes[i].waiting_time);
    }
    
    return 0;
}
